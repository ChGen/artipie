name: Run Artipie perftest
concurrency: perftest_env
on:
  workflow_run:
    workflows: [Prepare Artipie for perftest]
    types: [ completed ]
#    branches: [ech-dev]
jobs:
  perf-test2:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: [wsl-client]
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.workflow_run.head_branch }}
      - run: env;git branch -a
#      - run: env
#        name: 1st step of stage2
#      - name: 2nd step of stage2
#        run: env; ls -la; pwd; env > /tmp/perftest2.log; ls -lah >> /tmp/perftest2.log; date>>/tmp/perftest2.log; git show --summary HEAD >> /tmp/perftest2.log; git tag --points-at HEAD >>  /tmp/perftest2.log;
#      - name: Check variables
#        run: test ! -f $HOME/.benchvars && exit 1;exit 0
      - name: Check connection
        run: . "$HOME/.benchvars" && curl -v "http://$SERVER_HOST:$REPO_PORT/bintest"
      - name: Check variables
        run: test ! -f $HOME/.benchvars && exit 1;exit 0
#      - name: Prepare docker env
#        run: |
#          docker info
#          docker stop artipie || :
#          docker rm -fv artipie || :
#          docker image rm -f artipie/artipie:1.0-SNAPSHOT || :
#          docker ps
#      - name: Maven build
#        run: mvn clean install
#      - name: Check docker image
#        run: docker image inspect artipie/artipie:1.0-SNAPSHOT|head -n50
      - name: Checkout benchmarks repo
        run: git clone --depth=1 https://github.com/chgen/benchmarks.git
      - name: Checkout benchmarks branch
        run: |
          pwd; ls -lah; git branch -a
          git fetch --all
          git checkout master
          git pull --ff-only
          cd loadtests
        working-directory: benchmarks
      - name: Prepare JMeter
        run: |
          [ ! -s $HOME/apache-jmeter-5.5.tgz ] && wget https://dlcdn.apache.org/jmeter/binaries/apache-jmeter-5.5.tgz -O $HOME/apache-jmeter-5.5.tgz
          tar xf $HOME/apache-jmeter-5.5.tgz
        working-directory: benchmarks/loadtests
      - name: Prepare artifacts repo
        run: time ./prep-maven-dyn.py --total-artifacts 100 && du -ms ./test-data/maven-dyn
        working-directory: benchmarks/loadtests
      - name: Run upload test
        run: |
          . "$HOME/.benchvars"
          perfRes="./_perf_results"
          rm -rf "$perfRes"
          mkdir -p "$perfRes"
          tests="jmx-files-maven-ul jmx-files-maven-dl jmx-files-ul jmx-files-dl jmx-maven-ul jmx-maven-dl"
          for testName in $tests ; do
            echo "Running test $testName for $SERVER_HOST with $REPO_PORT port ..."
            timeout 400 "./$testName.sh" "$SERVER_HOST" "$REPO_PORT" 300 maven-dyn
            testRes=`readlink -f last_test_result`
            mv -fv "$testRes" "$perfRes/$testName"
            ls -lah "$perfRes/$testName"
            rm -fv last_test_result
          done
        working-directory: benchmarks/loadtests
#      - name: Check git tag
#        run: pwd;ls -lah;git tag -l; git branch -a;git tag --points-at HEAD
#        working-directory: benchmarks/loadtests
#      - name: Check env tag
#        run: bash -c 'echo ${GITHUB_REF##refs/tags/}'
#        working-directory: benchmarks/loadtests
      - name: Extract JFR log
        run: |
          . "$HOME/.benchvars"
          DOCKER_HOST="$SERVER_HOST:$DOCKER_PORT" docker exec artipie jcmd 1 JFR.dump filename=/var/artipie/.storage/data/bintest/artipie.jfr
          sleep 30
          rm -fv artipie.jfr artipie.jfr.tar.xz
          timeout 30 wget "http://$SERVER_HOST:$REPO_PORT/bintest/artipie.jfr"
          tar cJf artipie.jfr.tar.xz artipie.jfr
        working-directory: benchmarks/loadtests
      - name: Uploading results
        run: |
          ls -lah && pwd
          tag=`git tag --points-at HEAD|tail -n1`
          hash=`git rev-parse HEAD`
          if [ -z "$tag" ] ; then
            tag="$hash"
            echo "Error: tag is empty with commit $hash"
            exit 1
          fi
          . $HOME/.benchvars
          cd "benchmarks/loadtests"

          perftestsRepo='./perftests_repo'
          rm -rfv "$perftestsRepo"
          dstDir="$perftestsRepo/perftests/$tag"
          mkdir -p "$dstDir"
          perfRes="./_perf_results"
          for t in "$perfRes"/* ; do
            dst="./$dstDir/$(basename $t)"
            mkdir -p "$dst"
            ls -lah "$t"
            cp -fv "$t/statistics.json" "$dst"
          done
          tree "$perftestsRepo"
          ls -lah "$dstDir"

          time ./sync_perftests.sh https://central.artipie.com/artipie/benchmarks "${UPLOAD_LOGIN}" "${UPLOAD_PASSWORD}"

          git config --global user.name "Perftest Action"
          git config --global user.email "perftest@test.com"

          url="https://central.artipie.com/artipie/benchmarks/perftests_repo/jfr/artipie.last.jfr.tar.xz"
          curl -vT "./artipie.jfr.tar.xz" -u"${UPLOAD_LOGIN}:${UPLOAD_PASSWORD}" "$url"

          env
          rm -rf "$perfRes"
          echo "Uploaded all test results for tag: $tag; commit: $hash"
      - name: Generating graphs
        working-directory: benchmarks/loadtests
        run: |
          pip3 install packaging==21.3 matplotlib==3.6.3 mdutils==1.6.0

          . "$HOME/.benchvars"
          rm -rfv ./graphs
          time ./perfplot.py perftests_repo/perftests ./graphs
          for f in ./graphs/* ; do
            echo "$f"
            url="https://central.artipie.com/artipie/benchmarks/perftests_repo/graphs/$(basename $f)"
            echo curl -vT "$f" -u"UPLOAD_LOGIN:UPLOAD_PASSWORD" "$url"
            curl -vT "$f" -u"${UPLOAD_LOGIN}:${UPLOAD_PASSWORD}" "$url"
          done

          tmpDir="perftests_repo/tmp"

          # For v* tags:
          rm -rfv "$tmpDir"
          mkdir -p "$tmpDir"
          if [ -n "`find perftests_repo/perftests -maxdepth 1 -name 'v*'`" ] ; then
            mv -fv "perftests_repo/perftests"/v* "$tmpDir"
            rm -rfv ./graphs_v
            time ./perfplot.py "$tmpDir" ./graphs_v
            for f in ./graphs_v/* ; do
              echo "$f"
              url="https://central.artipie.com/artipie/benchmarks/perftests_repo/graphs_v/$(basename $f)"
              echo curl -vT "$f" -u"UPLOAD_LOGIN:UPLOAD_PASSWORD" "$url"
              curl -vT "$f" -u"${UPLOAD_LOGIN}:${UPLOAD_PASSWORD}" "$url"
            done
          else
            echo "No v* tag results in perftests_repo/perftests"
          fi

          # For t* tags:
          rm -rfv "$tmpDir"
          mkdir -p "$tmpDir"
          if [ -n "`find perftests_repo/perftests -maxdepth 1 -name 't*'`" ] ; then
            mv -fv "perftests_repo/perftests"/t* "$tmpDir"
            rm -rfv ./graphs_t
            time ./perfplot.py "$tmpDir" ./graphs_t
            for f in ./graphs_t/* ; do
              echo "$f"
              url="https://central.artipie.com/artipie/benchmarks/perftests_repo/graphs_t/$(basename $f)"
              echo curl -vT "$f" -u"UPLOAD_LOGIN:UPLOAD_PASSWORD" "$url"
              curl -vT "$f" -u"${UPLOAD_LOGIN}:${UPLOAD_PASSWORD}" "$url"
            done
          else
            echo "No t* tag results in perftests_repo/perftests"
          fi

          rm -rfv "$tmpDir"
#        working-directory: benchmarks/loadtests
#      - name: Stop artipie server?
#        run: docker ps;echo docker stop artipie; echo rm -rfv root; ls -lah
#        working-directory: benchmarks/loadtests
